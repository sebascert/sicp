(define (k-continued-fraction n d k)
 (define (iter i r)
  (if (> i 0)
   (iter (- i 1) (/ (n i) (- (d i) r)))
   r))

 (iter k 0))

(define (tan-cf x k)
 (k-continued-fraction (lambda (i)
                        (expt x i))
                       (lambda (i)
                        (++ (* (-- i) 2)))
                       k))

(print-line (tan 0))
(print-line (tan (/ pi 6)))
(print-line (tan (/ pi 4)))
(print-line (tan (/ pi 2)))
(print-line (tan pi))
(print-line (tan (* pi 2)))
(newline)
(define iterations 100)
(print-line (tan-cf 0 iterations))
(print-line (tan-cf (/ pi 6) iterations))
(print-line (tan-cf (/ pi 4) iterations))
(print-line (tan-cf (/ pi 2) iterations))
(print-line (tan-cf pi iterations))
(print-line (tan-cf (* pi 2) iterations))
