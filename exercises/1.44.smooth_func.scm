(define (compose f g)
 (lambda (x)
  (f (g x))))

(define (repeated f n)
 (define (iter i g)
  (if (< i n)
   (iter (++ i) (compose f g))
   g))

 (iter 1 f))

(define dx |.001|)
(define (n-fold f n)
 (define (smoothed g)
  (lambda (x)
   (average (g (- x dx)) (g x) (g (+ x dx)))))

 (repeated (smoothed f) n))

(define (noisy x)
 (+ (sin x) (* |.1| (cos (* 10 x)))))

(define f1 (n-fold noisy 0))
(define f2 (n-fold noisy 1))
(define f3 (n-fold noisy 5))
(define f4 (n-fold noisy 20))
(write-line (f1 |.5|))
(write-line (f1 1.0))
(write-line (f1 1.5))
(newline)
(write-line (f2 |.5|))
(write-line (f2 1.0))
(write-line (f2 1.5))
(newline)
(write-line (f3 |.5|))
(write-line (f3 1.0))
(write-line (f3 1.5))
(newline)
(write-line (f4 |.5|))
(write-line (f4 1.0))
(write-line (f4 1.5))
