(load "packages.picture_language.scm")
(define (corner-split painter n)
 (if (= n 0)
  painter
  (let ((up (up-split painter (- n 1)))
        (right (right-split painter (- n 1))))
   (let ((top-left up)
         (bottom-right right)
         (corner (corner-split painter (- n 1))))
    (beside (below painter top-left) (below bottom-right corner))))))

(define (simily-wave-painter)
 (segments->painter
  (list
   (make-segment (make-vect (/ 1.0 4.0) 0.0)
                 (make-vect (/ 1.0 2.0) (/ 1.0 2.0)))
   (make-segment (make-vect (/ 3.0 4.0) 0.0)
                 (make-vect (/ 1.0 2.0) (/ 1.0 2.0)))
   (make-segment (make-vect (/ 1.0 2.0) (/ 1.0 2.0))
                 (make-vect (/ 1.0 2.0) (/ 3.0 4.0)))
   (make-segment (make-vect (/ 1.0 2.0) (/ 3.0 4.0))
                 (make-vect (/ 1.0 4.0) (/ 1.0 2.0)))
   (make-segment (make-vect (/ 1.0 4.0) (/ 1.0 2.0))
                 (make-vect 0.0 (/ 3.0 4.0)))
   (make-segment (make-vect (/ 1.0 2.0) (/ 3.0 4.0))
                 (make-vect (/ 1.0 2.0) (/ 3.0 4.0)))
   (make-segment (make-vect (/ 1.0 2.0) (/ 3.0 4.0))
                 (make-vect 1.0 (/ 1.0 2.0)))
   (make-segment (make-vect (/ 1.0 2.0) (/ 3.0 4.0))
                 (make-vect (/ 3.0 8.0) (/ 7.0 8.0)))
   (make-segment (make-vect (/ 1.0 2.0) (/ 3.0 4.0))
                 (make-vect (/ 27.0 40.0) (/ 7.0 8.0)))
   (make-segment (make-vect (/ 3.0 8.0) (/ 7.0 8.0))
                 (make-vect (/ 3.0 8.0) 1.0))
   (make-segment (make-vect (/ 27.0 40.0) (/ 7.0 8.0))
                 (make-vect (/ 27.0 40.0) 1.0))
   (make-segment (make-vect (/ 27.0 40.0) (/ 7.0 8.0))
                 (make-vect (/ 27.0 40.0) 1.0))
   (make-segment (make-vect (/ 27.0 40.0) (/ 7.0 8.0))
                 (make-vect (/ 27.0 40.0) 1.0))
   (make-segment (make-vect (/ 1.0 2.0) (/ 7.0 8.0))
                 (make-vect (/ 7.0 16.0) (/ 15.0 16.0)))
   (make-segment (make-vect (/ 1.0 2.0) (/ 7.0 8.0))
                 (make-vect (/ 9.0 16.0) (/ 15.0 16.0))))))

(define (square-limit painter n tl tr bl br)
 (let ((combine4 (square-of-four tl tr bl br)))
  (combine4 (corner-split painter n))))

(define (square-of-four tl tr bl br)
 (lambda (painter)
  (let ((top (beside (tl painter) (tr painter)))
        (bottom (beside (bl painter) (br painter))))
   (below bottom top))))

; result
(square-limit simily-wave-painter 4 flip-horiz identity rotate180 flip-vert)
