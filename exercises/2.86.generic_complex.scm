(load "packages/generic_arithmetic.scm")
; implementation in generic_arithmetic
(define one (make-scheme-number 1))
(define two (make-scheme-number 2))
(define three (make-scheme-number 3))
(define half (make-rational 1 2))
(define third (make-rational 1 3))
(define z1 (make-complex-from-real-imag two three))
(define z2 (make-complex-from-real-imag one two))
(define z3 (make-complex-from-real-imag half third))
(test (real-part z1) (make-scheme-number 2))
(test (imag-part z1) (make-scheme-number 3))
(test (magnitude z1) (sqroot (make-scheme-number 13)))
(test (add z1 z2) (make-complex-from-real-imag 3 5))
(test (sub z1 z2) (make-complex-from-real-imag 1 1))
(test (real-part z3) half)
(test (imag-part z3) third)
(test (add z1 one) (make-complex-from-real-imag 3 3))
(test (add z1 half) (make-complex-from-real-imag (+ 2 1/2) 3))
