(define (add-interval x y)
 (make-interval (+ (lower-bound x) (lower-bound y))
                (+ (upper-bound x) (upper-bound y))))

(define (div-interval x y)
 (if (= 0 (- (lower-bound y) (upper-bound y)))
  (error "division by interval of length 0")
  (mul-interval x
                (make-interval (/ 1.0 (upper-bound y)) (/ 1.0 (lower-bound y))))))

(define (lower-bound int)
 (car int))

(define (make-interval a b)
 (cons a b))

(define (mul-interval x y)
 (let ((xl (lower-bound x))
       (xu (upper-bound x))
       (yl (lower-bound y))
       (yu (upper-bound y))
       (xl-sign (sign (lower-bound x)))
       (xu-sign (sign (upper-bound x)))
       (yl-sign (sign (lower-bound y)))
       (yu-sign (sign (upper-bound y))))
  (cond
   ((and (= xl-sign 1)
         (= xu-sign 1)
         (= yl-sign 1)
         (= yu-sign 1))
    (make-interval (* xl yl) (* xu yu)))
   ((and (= xl-sign 1)
         (= xu-sign 1)
         (= yl-sign -1)
         (= yu-sign 1))
    (make-interval (* xu yl) (* xu yu)))
   ((and (= xl-sign 1)
         (= xu-sign 1)
         (= yl-sign -1)
         (= yu-sign -1))
    (make-interval (* xu yl) (* xl yu)))
   ((and (= xl-sign -1)
         (= xu-sign 1)
         (= yl-sign 1)
         (= yu-sign 1))
    (make-interval (* xl yu) (* xu yu)))
   ((and (= xl-sign -1)
         (= xu-sign 1)
         (= yl-sign -1)
         (= yu-sign 1))
    (let ((ca (* xl yl))
          (cb (* xl yu))
          (cc (* xu yl))
          (cd (* xu yu)))
     (make-interval (min ca cb cc cd) (max ca cb cc cd))))
   ((and (= xl-sign -1)
         (= xu-sign 1)
         (= yl-sign -1)
         (= yu-sign -1))
    (make-interval (* xu yl) (* xl yl)))
   ((and (= xl-sign -1)
         (= xu-sign -1)
         (= yl-sign 1)
         (= yu-sign 1))
    (make-interval (* xl yu) (* xu yl)))
   ((and (= xl-sign -1)
         (= xu-sign -1)
         (= yl-sign -1)
         (= yu-sign 1))
    (make-interval (* xl yu) (* xl yl)))
   ((and (= xl-sign -1)
         (= xu-sign -1)
         (= yl-sign -1)
         (= yu-sign -1))
    (make-interval (* xu yu) (* xl yl)))
   (else
    (error "Unexpected sign combination")))))

(define (neg-interval int)
 (make-interval (- (upper-bound int)) (- (lower-bound int))))

(define (sub-interval a b)
 (add-interval a (neg-interval b)))

(define (test-mul-interval inta intb expected)
 (let ((mul (mul-interval inta intb)))
  (test (lower-bound mul) (lower-bound expected))
  (test (upper-bound mul) (upper-bound expected))))

(define (upper-bound int)
 (cdr int))

(test-mul-interval (make-interval 1 2) (make-interval 3 4) (make-interval 3 8))
(test-mul-interval (make-interval 1 2)
                   (make-interval -1 3)
                   (make-interval -2 6))
(test-mul-interval (make-interval 1 2)
                   (make-interval -4 -2)
                   (make-interval -8 -2))
(test-mul-interval (make-interval -2 3)
                   (make-interval 1 2)
                   (make-interval -4 6))
(test-mul-interval (make-interval -2 3)
                   (make-interval -1 4)
                   (make-interval -8 12))
(test-mul-interval (make-interval -2 1)
                   (make-interval -3 -1)
                   (make-interval -3 6))
(test-mul-interval (make-interval -4 -2)
                   (make-interval 2 3)
                   (make-interval -12 -4))
(test-mul-interval (make-interval -4 -2)
                   (make-interval -1 2)
                   (make-interval -8 4))
(test-mul-interval (make-interval -4 -2)
                   (make-interval -3 -1)
                   (make-interval 2 12))
(test-mul-interval (make-interval 0 0) (make-interval 0 0) (make-interval 0 0))
