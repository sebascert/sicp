(define (add-interval x y)
 (make-interval (+ (lower-bound x) (lower-bound y))
                (+ (upper-bound x) (upper-bound y))))

(define (center i)
 (/ (+ (lower-bound i) (upper-bound i)) 2))

(define (div-interval x y)
 (if (= 0 (- (lower-bound y) (upper-bound y)))
  (error "division by interval of length 0")
  (mul-interval x
                (make-interval (/ 1.0 (upper-bound y)) (/ 1.0 (lower-bound y))))))

(define (lower-bound int)
 (car int))

(define (make-center-percent center percentage)
 (let ((width (* center (percent percentage))))
  (make-interval (- center width) (+ center width))))

(define (make-interval a b)
 (cons a b))

(define (mul-interval x y)
 (let ((xl (lower-bound x))
       (xu (upper-bound x))
       (yl (lower-bound y))
       (yu (upper-bound y))
       (xl-sign (sign (lower-bound x)))
       (xu-sign (sign (upper-bound x)))
       (yl-sign (sign (lower-bound y)))
       (yu-sign (sign (upper-bound y))))
  (cond
   ((and (= xl-sign 1)
         (= xu-sign 1)
         (= yl-sign 1)
         (= yu-sign 1))
    (make-interval (* xl yl) (* xu yu)))
   ((and (= xl-sign 1)
         (= xu-sign 1)
         (= yl-sign -1)
         (= yu-sign 1))
    (make-interval (* xu yl) (* xu yu)))
   ((and (= xl-sign 1)
         (= xu-sign 1)
         (= yl-sign -1)
         (= yu-sign -1))
    (make-interval (* xu yl) (* xl yu)))
   ((and (= xl-sign -1)
         (= xu-sign 1)
         (= yl-sign 1)
         (= yu-sign 1))
    (make-interval (* xl yu) (* xu yu)))
   ((and (= xl-sign -1)
         (= xu-sign 1)
         (= yl-sign -1)
         (= yu-sign 1))
    (let ((ca (* xl yl))
          (cb (* xl yu))
          (cc (* xu yl))
          (cd (* xu yu)))
     (make-interval (min ca cb cc cd) (max ca cb cc cd))))
   ((and (= xl-sign -1)
         (= xu-sign 1)
         (= yl-sign -1)
         (= yu-sign -1))
    (make-interval (* xu yl) (* xl yl)))
   ((and (= xl-sign -1)
         (= xu-sign -1)
         (= yl-sign 1)
         (= yu-sign 1))
    (make-interval (* xl yu) (* xu yl)))
   ((and (= xl-sign -1)
         (= xu-sign -1)
         (= yl-sign -1)
         (= yu-sign 1))
    (make-interval (* xl yu) (* xl yl)))
   ((and (= xl-sign -1)
         (= xu-sign -1)
         (= yl-sign -1)
         (= yu-sign -1))
    (make-interval (* xu yu) (* xl yl)))
   (else
    (error "Unexpected sign combination")))))

(define (neg-interval int)
 (make-interval (- (upper-bound int)) (- (lower-bound int))))

(define (percentage i)
 (if (= (center i) 0)
  0
  (* 100 (/ (width i) (center i)))))

(define (sub-interval a b)
 (add-interval a (neg-interval b)))

(define (test-center-percentage c p)
 (let ((i (make-center-percent c p)))
  (test (center i) c)
  (test (percentage i) p)))

(define (upper-bound int)
 (cdr int))

(define (width i)
 (/ (- (upper-bound i) (lower-bound i)) 2))

(test-center-percentage 100 5)
(test-center-percentage 50 10)
(test-center-percentage -30 20)
(test-center-percentage 0 25)
; should fail
(test-center-percentage 200.0 2.5)
(test-center-percentage 1 100)
(test-center-percentage -100 50)
(test-center-percentage 1 10)
(test-center-percentage 1000.0 0.1)
(test-center-percentage -0.25 80.0)
